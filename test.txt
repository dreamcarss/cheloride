const getALlCars = async(req, res) => {
    try {
        let sDate = new Date(req.headers.startdate);
        let dDate = new Date(req.headers.enddate);
        let carsList = [];
        let loc = req.headers.loc;
        let cars = await carModel.find();
        let diff;
        let promises = cars.map(async (car) => {
            await bookingModel.findOne({ carId: car._id, bookingStatus:true}).then((booking) => {
                if (booking != null) {
                    let startDate = new Date(booking.startDate);
                    let endDate = new Date(booking.endDate);
                    diff = Math.abs(endDate - startDate) / 8.64e+7;
                    if (
                        (sDate >= startDate && sDate < endDate) ||
                        (dDate > startDate && dDate <= endDate)
                    ) {
                        console.log("null");
                    } else {
                        console.log("avail");
                        carsList.push(car);
                    }
                } else {
                    carsList.push(car);
                }
            });
        });
        Promise.all(promises).then(() => {
            if(carsList.length > 0){
                res.status(200).json({"cars": carsList, "diff": diff})
            }else{
                res.status(404).json({"msg": "no cars available"})
            }
        })
    } catch (error) {
        console.log(error)
    }
}


const getALlCars = async(req, res) => {
    try {
      let sDate = new Date(req.headers.startdate);
      let dDate = new Date(req.headers.enddate);
      let carsList = [];
      let loc = req.headers.loc;
      let cars = await carModel.find()
      let diff;
      let promises = cars.map(async (car) => {
        await bookingModel.findOne({ carId: car._id, bookingStatus:true}).then((booking) => {
          let startDate = new Date(sDate);
          let endDate = new Date(dDate);
          diff = Math.abs(endDate - startDate) / 8.64e+7;
          if (booking != null) {
            let dropDate = new Date(endDate).toISOString().split('T')[0];
             if (
              (sDate >= startDate && sDate < endDate) ||
              (dDate > startDate && dDate < endDate)
            ) {
              null;
              console.log("null");
            } else {
              console.log("avail");
              carsList.push(car);
            }
          } else {
            carsList.push(car);
          }
        });
      });
      Promise.all(promises).then(() => {
        if(carsList.length > 0){
          res.status(200).json({"cars": carsList, "diff": diff})
        }else{
          res.status(404).json({"msg": "no cars available"})
        }
      })
    } catch (error) {
        console.log(error)
    }
}